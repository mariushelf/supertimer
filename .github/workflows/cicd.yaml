name: CI/CD

on: # events that trigger our pipeline: push on any branch and release creation
  push:
  release:
    types: [published]

jobs:
  lint:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: pip install pre-commit
      - name: Run pre-commit hooks
        run: pre-commit run --all-files
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install dependencies
        run: uv sync
      - name: Run pytest
        run: |
          uv run pytest
#      - name: "Upload coverage to Codecov"
#        uses: codecov/codecov-action@v4
#        with:
#          fail_ci_if_error: true
#          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
  build-n-publish:
    environment: production
    name: Build and publish Python distributions to PyPI
    needs:
      - test
      - lint
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Check tag and version match
        run: |
          VERSION=$(uvx --from "pyproject-parser[cli]" pyproject-info project.version)
          if [ "$VERSION" != "\"${{ github.ref_name }}\"" ]; then
            echo Tag ${{ github.ref_name }} does not match package version $VERSION.
            exit 1
          else
            echo Package version and tag match.
          fi
      - name: Build package
        run: uv build
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
